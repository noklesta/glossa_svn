#LyX 1.4.1 created this file. For more info see http://www.lyx.org/
\lyxformat 245
\begin_document
\begin_header
\textclass book
\language english
\inputencoding auto
\fontscheme default
\graphics default
\paperfontsize default
\spacing single
\papersize default
\use_geometry false
\use_amsmath 1
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\secnumdepth 2
\tocdepth 2
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 2
\paperpagestyle default
\tracking_changes false
\output_changes false
\end_header

\begin_body

\begin_layout Title

\noun on
Glossa
\noun default
: Administrators manual
\end_layout

\begin_layout Author
Lars Nygaard, Anders Nøklestad
\end_layout

\begin_layout Standard
Related documentation:
\end_layout

\begin_layout Itemize

\noun on
Glossa
\noun default
 User's Manual (doc/GLOSSA_manual.pdf)
\end_layout

\begin_layout Itemize

\noun on
Glossa
\noun default
 installation guide (INSTALL.txt)
\end_layout

\begin_layout Section
A warning about terminology
\end_layout

\begin_layout Standard
For historical reasons, the word 'corpus' is used in a confusing manner
 in the Glossa source code and (some of the) documentation.
 It should be:
\end_layout

\begin_layout Description
corpus a CWB corpus; may only be one language
\end_layout

\begin_layout Description
project may comprise several CWB corpora (for multilingual corpora).
 In the future, one should log in to glossa/html/index_dev.php?
\emph on
project
\emph default
=XX not glossa/html/index_dev.php?
\emph on
corpus
\emph default
=XX
\end_layout

\begin_layout Chapter
Introduction
\end_layout

\begin_layout Standard
Technically, 
\noun on
Glossa 
\noun default
it is a front end for the CQP program, part of the IMS Corpus Workbench
\begin_inset Foot
status collapsed

\begin_layout Standard

\end_layout

\end_inset

, the MySQL relational database
\begin_inset Foot
status collapsed

\begin_layout Standard

\end_layout

\end_inset

, tgrep2
\begin_inset Foot
status collapsed

\begin_layout Standard
http://tedlab.mit.edu/~dr/Tgrep2/
\end_layout

\end_inset

 and Ted Pedersen's Ngrams Statistics Package
\begin_inset Foot
status collapsed

\begin_layout Standard

\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
A corpus instance:
\end_layout

\begin_layout Itemize
A html/php start page
\end_layout

\begin_layout Itemize
Configuration files
\end_layout

\begin_layout Itemize
CWB files
\end_layout

\begin_layout Itemize
Database tables:
\end_layout

\begin_deeper
\begin_layout Itemize
bibliografic
\end_layout

\begin_layout Itemize
sentences
\end_layout

\begin_layout Itemize
lexical statistics
\end_layout

\begin_layout Itemize
annotation
\end_layout

\end_deeper
\begin_layout Chapter
Configuration
\end_layout

\begin_layout Section
PHP/html
\end_layout

\begin_layout Standard
If you are using the standard PHP query page, you must edit the following
 regions:
\end_layout

\begin_layout LyX-Code
if ( $_GET['corpus'] == 'test' ) {
\end_layout

\begin_layout LyX-Code
echo "<script language='javascript' src='" .
 $htmlRoot .
 "/js/test.js'></script>";
\end_layout

\begin_layout LyX-Code
}
\end_layout

\begin_layout LyX-Code
--
\end_layout

\begin_layout LyX-Code
if ( $_GET['corpus'] == 'test' ) {
\end_layout

\begin_layout LyX-Code
include("test.inc");
\end_layout

\begin_layout LyX-Code
}
\end_layout

\begin_layout LyX-Code
--
\end_layout

\begin_layout LyX-Code
if ( $_GET['corpus'] == 'test' ) {
\end_layout

\begin_layout LyX-Code
include("test_cred.inc");
\end_layout

\begin_layout LyX-Code
}
\end_layout

\begin_layout Section
JavaScript 
\end_layout

\begin_layout Standard
You need to create a javacript files called js/<projectname>.conf.js.
 So, for the monolingual project "nota", the following files is created:
\end_layout

\begin_layout LyX-Code
var conf = new Array;
\end_layout

\begin_layout LyX-Code
var languageOpts = new Array;
\end_layout

\begin_layout LyX-Code
languageOpts = [['NOTA2', 'Norsk', 'no']];
\end_layout

\begin_layout LyX-Code
var htmlRoot = 'http://omilia.uio.no/glossa/';
\end_layout

\begin_layout LyX-Code
var cgiRoot = 'http://omilia.uio.no/cgi-bin/glossa/';
\end_layout

\begin_layout LyX-Code
conf['type'] = 'monolingual';
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
var language='no';
\end_layout

\begin_layout Standard
For the multilingual "samno" project, we get:
\end_layout

\begin_layout LyX-Code
var languageOpts = new Array;
\end_layout

\begin_layout LyX-Code
languageOpts = [['SAMNO_SAMISK', 'Sami', 'sa'], ['SAMNO_NORSK', 'Norwegian',
 'no']];
\end_layout

\begin_layout LyX-Code
var conf = new Array;
\end_layout

\begin_layout LyX-Code
conf['type'] = 'multilingual';
\end_layout

\begin_layout LyX-Code
conf['title'] = 'Search Sami-Norwegian corpus';
\end_layout

\begin_layout LyX-Code
conf['corpus_name'] = 'Sami-Norwegian Corpus';
\end_layout

\begin_layout LyX-Code
var language='en';
\end_layout

\begin_layout LyX-Code
var cgiRoot = 'http://omilia.uio.no/cgi-bin/glossa/';
\end_layout

\begin_layout Standard
Also, you might need to change the file js/dynamic_form_dev.js, around:
\end_layout

\begin_layout LyX-Code
if (language == 'TEST') {
\end_layout

\begin_layout LyX-Code
   reloadMenuTest();
\end_layout

\begin_layout LyX-Code
}
\end_layout

\begin_layout Subsection
Shortcuts
\end_layout

\begin_layout Standard
Keyboard shortcuts are defined in the <projectname>.conf.js file:
\end_layout

\begin_layout LyX-Code
shortcut("Ctrl+Shift+L",function() {
\end_layout

\begin_layout LyX-Code
   addOpt('w','lemma','grunnform');
\end_layout

\begin_layout LyX-Code
});
\end_layout

\begin_layout Standard
'addOpt' can be used instead of clicking on the menu, and use the same values.
\end_layout

\begin_layout Section
Configuration files
\end_layout

\begin_layout Subsection
Main configuration
\end_layout

\begin_layout Standard
Below is an example of a corpus configuration file ("cgi.conf"):
\end_layout

\begin_layout LyX-Code
db_pwd  = 
\end_layout

\begin_layout LyX-Code
db_name = 
\end_layout

\begin_layout LyX-Code
db_uname = 
\end_layout

\begin_layout LyX-Code
db_host = localhost
\end_layout

\begin_layout LyX-Code
charset = UTF-8
\end_layout

\begin_layout LyX-Code
charsetfrom = ISO-8859-10
\end_layout

\begin_layout LyX-Code
htmlRoot = http://omilia.uio.no/glossa/
\end_layout

\begin_layout LyX-Code
cgiRoot = http://omilia.uio.no/cgi-bin/glossa/
\end_layout

\begin_layout LyX-Code
type = multilingual
\end_layout

\begin_layout LyX-Code
logfile = /var/www/cgi-data/omclog
\end_layout

\begin_layout LyX-Code
cwb_registry = /hf/omilia/site/corpora/cwb_reg
\end_layout

\begin_layout LyX-Code
corpus_attributes = word lemma pos type grad_dia tense_defin case_mood 
\end_layout

\begin_layout LyX-Code
     person_type2 number gender polarity syntax
\end_layout

\begin_layout LyX-Code
corpus_structures = s_id text_id
\end_layout

\begin_layout LyX-Code
link_structure = text_id
\end_layout

\begin_layout LyX-Code
diacr_table = /var/www/html/omc/diacr.dat
\end_layout

\begin_layout LyX-Code
tmp_dir = /var/www/cgi-data/tmp
\end_layout

\begin_layout LyX-Code
dat_files = /var/www/html/CE2/dat
\end_layout

\begin_layout LyX-Code
download_url = http://omilia.uio.no/glossa/download/ 
\end_layout

\begin_layout LyX-Code
config_dir = /hf/omilia/site/glossa-0.7/dat/ 
\end_layout

\begin_layout LyX-Code
subcorp_files = /hf/omilia/site/glossa-0.7/dat/samno/subcorp/ 
\end_layout

\begin_layout LyX-Code
hits_files = /hf/omilia/site/glossa-0.7/dat/samno/hits/ 
\end_layout

\begin_layout LyX-Code
lang = en
\end_layout

\begin_layout LyX-Code
meta_text = tid title publisher pubdate pubplace translation lang origlang
 
\end_layout

\begin_layout LyX-Code
     tagger langvariety author translator classcode istrans
\end_layout

\begin_layout LyX-Code
meta_class = class
\end_layout

\begin_layout Standard
The file format is simple: One entry per line; a keyword, a "="-sign, and
 a space separated list of values.
\end_layout

\begin_layout Description
db_pwd,db_name,db_uname,db_host Login information for the metadata database
\end_layout

\begin_layout Description
charset the character set used for displayed text
\end_layout

\begin_layout Description
charsetfrom the character set used in the cwb-encoded data.
 If this is defined, the text will be converted from this character set
 to the one defined under 
\emph on
charset
\emph default
 before being displayed
\end_layout

\begin_layout Description
htmlRoot the root directory for interface files (HTML, PHP and JavaScript)
\end_layout

\begin_layout Description
cgiRoot the root directory for cgi scripts
\end_layout

\begin_layout Description
type monolingual or multilingual
\end_layout

\begin_layout Description
logfile full path to the query logfile
\end_layout

\begin_layout Description
cwb_registry full path to the directory containing the registry file for
 the corpus
\end_layout

\begin_layout Description
corpus_attributes the cwb attributes to be displayed (note that this is
 not necessarily the same as the attributes that are searched in).
\end_layout

\begin_layout Description
corpus_structures the cwb structural tags to be displayed
\end_layout

\begin_layout Description
link_structure (currently not used)
\end_layout

\begin_layout Description
diacr_table conversion table for diacritics
\end_layout

\begin_layout Description
tmp_dir directory where temporary search data is stored
\end_layout

\begin_layout Description
dat_files where the other configuration files are stored
\end_layout

\begin_layout Description
download_url URL from which the corpus can be downloaded(?)
\end_layout

\begin_layout Description
config_dir location of the configuration files
\end_layout

\begin_layout Description
subcorp_files location of stored subcorpus definitions
\end_layout

\begin_layout Description
hits_files location of stored hits
\end_layout

\begin_layout Description
lang the language used in the interface
\end_layout

\begin_layout Description
meta_text the columns in the main metadata column ("text")
\end_layout

\begin_layout Description
meta_class,meta_author the columns in the auxilliary metadata columns ("class"
 and "author")
\end_layout

\begin_layout Description
groupfile the path to a file containing a space separated list of users
 that are allowed to access the corpus
\end_layout

\begin_layout Description
charset the character set used in the interface (seen by the user)
\end_layout

\begin_layout Description
charsetfrom if the charset of the CWB data, if it is different from 'charset'
 (typically used because CWB does not support Unicode).
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout Subsection
Metadata configuration
\end_layout

\begin_layout Standard
The metadata interface is controlled by several configuration files.
 The main file, "meta.conf", is illustrated below:
\end_layout

\begin_layout LyX-Code
collection      db      text    collection
\end_layout

\begin_layout LyX-Code
title           db      text    title   where collection = ""
\end_layout

\begin_layout LyX-Code
title-alle      db      text    title   where collection != ""
\end_layout

\begin_layout LyX-Code
issnisbn        db      text    issnisbn
\end_layout

\begin_layout LyX-Code
publisher       db      text    publisher
\end_layout

\begin_layout LyX-Code
pubplace        db      text    pubplace
\end_layout

\begin_layout LyX-Code
tid             db      text    tid
\end_layout

\begin_layout LyX-Code
name            db      author  name    where in_collection = 1
\end_layout

\begin_layout LyX-Code
name-alle       db      author  name    where in_collection = 0
\end_layout

\begin_layout LyX-Code
geogr           file    author  geogr
\end_layout

\begin_layout LyX-Code
geogr-alle      file    author  geogr
\end_layout

\begin_layout LyX-Code
kategori        file    text    category
\end_layout

\begin_layout LyX-Code
kategori-alle   file    text    category
\end_layout

\begin_layout LyX-Code
emne            file    class   class
\end_layout

\begin_layout LyX-Code
emne-alle       file    class   class
\end_layout

\begin_layout LyX-Code
auth-type       file    author  type
\end_layout

\begin_layout LyX-Code
auth-gender     file    author  sex
\end_layout

\begin_layout LyX-Code
translated      file    text    istrans
\end_layout

\begin_layout Standard
It is a tab-separated file, where each line describes the content of a metadata
 widget.
 Each line has four mandatory columns and one optional column:
\end_layout

\begin_layout Description
identifier the string used in HTML/PHP to create the widget.
\begin_inset Foot
status collapsed

\begin_layout Standard
All identifiers ending with "-alle" will be created as sub-menues if there
 exisists identifiers that is identical without this suffix.
\end_layout

\end_inset


\end_layout

\begin_layout Description
type "db" or "file": where the program should fetch the content of the widget.
 
\end_layout

\begin_layout Description
tablename which of the three tables ("text", "class", "author") the widget
 applies to.
\end_layout

\begin_layout Description
column\InsetSpace ~
name which column the widget applies to.
\end_layout

\begin_layout Description
constraint if only some of the (only applicable for "db"-type widgets).
\end_layout

\begin_layout Standard
If "db" is selected as type, the program extracts all possible values from
 the appropriate table and column (modulu the optional constrint) and populates
 the widget.
 For example, in the second line, the widget called "title" is populated
 with all the values from the column "title", in the table "text", for all
 entries where the "collection"-column is empty (in this case, removing
 newspaper articles etc).
\end_layout

\begin_layout Standard
If "file" is selected, the program reads the contents of the widget from
 the file named "<identifier>.dat":
\end_layout

\begin_layout LyX-Code
original        n
\end_layout

\begin_layout LyX-Code
translation     y
\end_layout

\begin_layout Standard
This is also a tab-separated file, where the displayed name of each entry
 is found in the first column, and the actual content (of the query to the
 database) is in the second column.
\end_layout

\begin_layout Standard
When the widgets are populated, they can be created in the HTML/PHP file
 of the corpus interface like this:
\end_layout

\begin_layout LyX-Code
<script language="javascript">
\end_layout

\begin_layout LyX-Code
  writeWidgetDoubleTable('title','tittel','hidden')
\end_layout

\begin_layout LyX-Code
</script>
\end_layout

\begin_layout LyX-Code
<br />
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
<script language="javascript">
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
</script>
\end_layout

\begin_layout LyX-Code
<br />
\end_layout

\begin_layout LyX-Code
 
\end_layout

\begin_layout LyX-Code
<script language="javascript">
\end_layout

\begin_layout LyX-Code
   writeWidgetCheck('translated','translated', 'open')
\end_layout

\begin_layout LyX-Code
</script>
\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Standard
innhold i db-tabell for at check-typen skal virke?
\end_layout

\end_inset


\end_layout

\begin_layout Standard
If your Glossa installation is going to handle multiple corpora, you would
 normally put the widget creation code for different corpora into different
 files (e.g.
 sami.inc, omc.inc etc.) and select which file to include at runtime depending
 on the selected corpus.
\end_layout

\begin_layout Subsection
Menu generation
\end_layout

\begin_layout Standard
To generate a menu, you have to create a menu file, and run the create_menu_item.
pl command.
 The menu file uses a sligthly idiosyncatic file format based on tab separated
 fields:
\begin_inset Foot
status collapsed

\begin_layout Standard
The format is likely to change in the future, when a standard format for
 all Glossa configuration files are established.
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
lemma   lemma form
\end_layout

\begin_layout LyX-Code
case    case sensitive
\end_layout

\begin_layout LyX-Code
start   start of word
\end_layout

\begin_layout LyX-Code
end     end of word
\end_layout

\begin_layout LyX-Code
middle  middle of word
\end_layout

\begin_layout LyX-Code
neg     exclude
\end_layout

\begin_layout LyX-Code
# w     word
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
word    add word
\end_layout

\begin_layout LyX-Code
!word   add negated word
\end_layout

\begin_layout LyX-Code
lemma   add lemma
\end_layout

\begin_layout LyX-Code
!lemma  add negated lemma
\end_layout

\begin_layout LyX-Code
# ADDSTRING     additional string
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
*       zero or more
\end_layout

\begin_layout LyX-Code
+       one or more
\end_layout

\begin_layout LyX-Code
?       zero or one
\end_layout

\begin_layout LyX-Code
# occ   occurences
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
<break>
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
A       adjective
\end_layout

\begin_layout LyX-Code
CC      CC
\end_layout

\begin_layout LyX-Code
Pr      preposition
\end_layout

\begin_layout LyX-Code
N       noun
\end_layout

\begin_layout LyX-Code
Pron    pronoun
\end_layout

\begin_layout LyX-Code
Po      postposition
\end_layout

\begin_layout LyX-Code
V       verb
\end_layout

\begin_layout LyX-Code
CS      CS
\end_layout

\begin_layout LyX-Code
Adv     adverb
\end_layout

\begin_layout LyX-Code
Interj  interjection
\end_layout

\begin_layout LyX-Code
Num     numeral
\end_layout

\begin_layout LyX-Code
Pcle    particle
\end_layout

\begin_layout LyX-Code
# pos   Part of Speech
\end_layout

\begin_layout Standard
In the left column are the names as they are stored internally in the corpus,
 to the right are the names as displayed in the menu.
 Lines starting with a "#"-character designate categories; so when a user
 selects 
\emph on
"Part of Speech" \SpecialChar \menuseparator
adjective
\emph default
, the internal query will be "[pos='adj']".
 A single line containing the string "<break>" will create a line break
 in the menu.
 A single line containing other words in angle brackets will create a heading
 in the menu.
 
\end_layout

\begin_layout Standard
The generation script is applied to this file to create a javascript file.
 This script takes three arguments, the corpus name, the nane of the javascript
 function, and the language in the menu (Norwegian or English).
 Typically, the last two parameters will be stored inside the program, so
 only the first one is needed:
\end_layout

\begin_layout LyX-Code

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
create_menu_item.pl <corpusname> <javascript_function> <language:en|no> <
 menu-file > javascript-file
\end_layout

\begin_layout LyX-Code
create_menu_item.pl SAMI < sami_menu.txt > sami.js
\end_layout

\begin_layout Standard
The Javascript file will typically be located in the Glossa directory, under
 /js.
\end_layout

\begin_layout Standard

\emph on
Rule of Thumb:
\emph default
 For maximum usability, try to find a balance between depth and breadth
 of the menu.
 In other words, neither the main menu or any of the submenues should contain
 more than about seven items.
 If long menues cannot be avoided, try to use line breaks or headings.
\end_layout

\begin_layout Section
Tagset conversion
\end_layout

\begin_layout Standard
Because of a bug in CWB, there is a limit to how many positional attributes
 one may use.
\begin_inset Foot
status collapsed

\begin_layout Standard
The exact number depends on the lenght of the longest sentence in the corpus.
\end_layout

\end_inset

 Therefore, one may compress several non-overlapping categories in a single
 positional attribute, for example 'mood' and 'case' (which never apply
 to the same token).
 The name must contain an underscore.
\end_layout

\begin_layout Standard
The compressed categories can then be expanded with the file $GLOSSA/dat/<projec
tname>/multitags.dat.
 The format is (tab separated):
\end_layout

\begin_layout Itemize
name of compressed attribute (mood_case)
\end_layout

\begin_layout Itemize
a value (e.g.
 'Nominative')
\end_layout

\begin_layout Itemize
the new attribute name (e.g.
 'mood')
\end_layout

\begin_layout Section
Files created by Glossa
\end_layout

\begin_layout Standard
Each search creates a set of results files, and various configuration files
 for the search.
 These are very useful for debugging.
 They are placed in a directory specified by the cgi.conf file, and start
 with the query id (can be found in the urls of the result page).
\end_layout

\begin_layout Chapter
Data used by Glossa
\end_layout

\begin_layout Section
CWB files
\end_layout

\begin_layout Standard
For the creation of CWB registry and data files, you should refer to the
 CWB documentation.
 There are some extra things to consider, however:
\end_layout

\begin_layout Itemize
s_id should be unique over entire corpus
\end_layout

\begin_layout Itemize
tags should be converted into columns, where possible (jf.
 NLP::Tag2Cols)
\end_layout

\begin_layout Itemize
word forms and lemma forms should not contain spaces (use underscore instead)
\end_layout

\begin_layout Section
Metadata database
\end_layout

\begin_layout Standard
The metadata database is optional, but has many possibilities.
 
\end_layout

\begin_layout Standard
All tablenames are prepended with the project name (in capital letters).
 Thus 'BOKMALtext' is the main table of the 'bokmal' project.
 The minimal text table contains three columns: 
\end_layout

\begin_layout Description
tid The text id used to connect other tables (must be the first column)
\end_layout

\begin_layout Description
startpos The token number in the corpus of the first token in the text 
\end_layout

\begin_layout Description
endpos The token number in the corpus of the last token in the text
\end_layout

\begin_layout Standard
In addition, you can have all kinds of other columns (title, publisher,
 publication date etc.).
 
\end_layout

\begin_layout Standard
The token number is the line number in the cwb input file (not counting
 structural annotation: lines staring with 
\emph on
'<
\emph default
').
 You can extract start/stop positions from a CWB input file with the script
 $GLOSSA/bin/ positions_from_tab.pl 
\end_layout

\begin_layout LyX-Code
perl positions_from_tab.pl --mode=db --table=UPUStext --tag=text < cwbinput.txt
\end_layout

\begin_layout Standard
This will extract the position of the "text" structural annotation into
 the startpos/endpos columns of the UPUStext table.
\end_layout

\begin_layout Standard
You can create two additional metadata tables, for one-to-many relationships:
 author and class (named BOKMALauthor and BOKMALclass in this example).
 The first column of those tables must also be 'tid'.
\end_layout

\begin_layout Subsection
Multiple start/stop-positions per text
\end_layout

\begin_layout Standard
For some corpora, particularly spoken language corpora, it's desirable to
 have multiple start/stop-positions.
 To do this, use a 'bounds_type=multiple' line in the configuration file,
 and populate the column 'bounds' with a tab-separated list of all the start-sto
p-positions (start/stop separated by a hyphen).
 Note that the positions must be in ascending order.
\end_layout

\begin_layout Section
Lexical statistics
\end_layout

\begin_layout Standard
Glossa can access two kinds of sources for precompiled lexical statistics.
 
\end_layout

\begin_layout Standard
Firstly, the table called <projectname>_<corpusname>lexstat.
 This contains a column called 'form' and one column for each of the CWB
 positional attributes (lemma, POS etc.), and finally a column 'freq' with
 the frequency.
 The column will be used for the separate lexical statistics interface,
 and for the collocation interface (the 'Use global statistics' option,
 which will improve performance dramatically).
\end_layout

\begin_layout Standard
Secondly, a set of gzipped files, one for each text in the corpus, containing
 (at each line) lemma<tab>pos<tab>frequency.
 The name should be the 'tid' from the metadata table +"dat.gz".
 The files are used whan computing tables of words that are typical of a
 category (for terminology extraction etc.), in the lexical statistics interface.
\end_layout

\begin_layout Section
Alignment table
\end_layout

\begin_layout Standard
For multilingual corpora, an alignment table is needed to show the clickable
 id to the left of the aligned corpus line.
 The table should be named <projectname>s_align, and contain
\end_layout

\begin_layout Description
source sentence id
\end_layout

\begin_layout Description
target sentence id
\end_layout

\begin_layout Description
lang language (abbreviation)
\end_layout

\begin_layout Section
Annotation
\end_layout

\begin_layout Standard
To allow user annotation of corpus positions, three tables must be created:
\end_layout

\begin_layout Description
<projectname>annotation_sets Lists the various possible annotations.
\end_layout

\begin_layout Description
<projectname>annotation_values Lists the various possibilities for the various
 sets.
\end_layout

\begin_layout Description
<projectname>annotations User data about positions, using the sets and values
 of the other tables.
\end_layout

\begin_layout Chapter
Scripts for encoding data
\end_layout

\begin_layout Standard
The 
\noun on
Glossa
\noun default
 system does not care how you generate your data.
 But there are some utility scripts in the package that might come in handy.
\end_layout

\begin_layout Section
Cwb data
\end_layout

\begin_layout Standard
TEI
\end_layout

\begin_layout Standard
Simple text
\end_layout

\begin_layout Standard
Tagged text
\end_layout

\begin_layout Standard
Tagset conversion
\end_layout

\begin_layout Subsection
Alignment
\end_layout

\begin_layout Section
Metadata
\end_layout

\end_body
\end_document
